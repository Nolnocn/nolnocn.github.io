// Generated by Haxe 3.4.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ColorScheme = { __ename__ : true, __constructs__ : ["Dark","Light"] };
ColorScheme.Dark = ["Dark",0];
ColorScheme.Dark.toString = $estr;
ColorScheme.Dark.__enum__ = ColorScheme;
ColorScheme.Light = ["Light",1];
ColorScheme.Light.toString = $estr;
ColorScheme.Light.__enum__ = ColorScheme;
var CodeDisplay = function() {
	var _gthis = this;
	EventManager.subscribeToEvent("Unpause",$bind(this,this.resumeCodeExecution));
	EventManager.subscribeToEvent("PopFileStack",$bind(this,this.popCodeFileStack));
	EventManager.subscribeToEvent("PushFile",function() {
		if(codefiles_CodeFile.queuedFile != null) {
			_gthis.pushCodeFile(codefiles_CodeFile.queuedFile);
			codefiles_CodeFile.queuedFile = null;
		}
	});
	EventManager.subscribeToEvent("SetFile",function() {
		if(codefiles_CodeFile.queuedFile != null) {
			_gthis.pushCodeFile(codefiles_CodeFile.queuedFile,false);
			codefiles_CodeFile.queuedFile = null;
		}
	});
	this.m_currColorScheme = ColorScheme.Dark;
	this.m_container = window.document.querySelector(".codeContainer");
	this.m_transitionOverlay = HtmlUtils.getElementById("transitionOverlay");
	this.m_transitionOverlay.style.display = "none";
	this.createColorSchemeButton();
	this.m_fileStack = [];
	this.m_fileStack.push(new codefiles_SplashScreen());
	this.renderCodeFile();
	this.resumeCodeExecution();
};
CodeDisplay.__name__ = true;
CodeDisplay.prototype = {
	pushCodeFile: function(file,keepPrevious) {
		if(keepPrevious == null) {
			keepPrevious = true;
		}
		if(!keepPrevious) {
			this.m_fileStack.pop();
		}
		this.m_fileStack.push(file);
		this.transitionCodeFile();
	}
	,popCodeFileStack: function() {
		if(this.m_fileStack.length == 1) {
			console.log("Reached end of file stack...");
			return;
		}
		this.m_fileStack.pop();
		this.transitionCodeFile();
	}
	,createColorSchemeButton: function() {
		var _gthis = this;
		var document = window.document;
		var button = window.document.createElement("button");
		button.className = "colorPick";
		button.innerHTML = "&#9728;";
		button.onclick = function(event) {
			button.blur();
			if(_gthis.m_currColorScheme == ColorScheme.Dark) {
				_gthis.applyColorScheme(ColorScheme.Light);
				button.innerHTML = "&#9680;";
			} else {
				_gthis.applyColorScheme(ColorScheme.Dark);
				button.innerHTML = "&#9728;";
			}
		};
		window.document.body.appendChild(button);
	}
	,applyColorScheme: function(scheme) {
		this.m_currColorScheme = scheme;
		var newSchemeString = scheme == ColorScheme.Dark ? " dark" : " light";
		var origSchemeString = scheme != ColorScheme.Dark ? " dark" : " light";
		var document = window.document;
		var elems = document.body.getElementsByTagName("*");
		HtmlUtils.removeClassFromElement(document.body,origSchemeString);
		HtmlUtils.addClassToElement(document.body,newSchemeString);
		var _g = 0;
		while(_g < elems.length) {
			var element = elems[_g];
			++_g;
			HtmlUtils.removeClassFromElement(element,origSchemeString);
			HtmlUtils.addClassToElement(element,newSchemeString);
		}
	}
	,renderCodeFile: function() {
		this.m_container.innerHTML = "<br>";
		this.m_container.appendChild(this.getActiveCodeFile().getHtml());
		this.m_container.innerHTML += "<br>";
		this.applyColorScheme(this.m_currColorScheme);
	}
	,getActiveCodeFile: function() {
		return this.m_fileStack[this.m_fileStack.length - 1];
	}
	,resumeCodeExecution: function() {
		this.getActiveCodeFile().execute();
	}
	,transitionCodeFile: function() {
		var _gthis = this;
		this.m_transitionOverlay.style.display = "block";
		HtmlUtils.addClassToElement(this.m_transitionOverlay,"overlayFadeIn");
		haxe_Timer.delay(function() {
			HtmlUtils.removeClassFromElement(_gthis.m_transitionOverlay,"overlayFadeIn");
			HtmlUtils.addClassToElement(_gthis.m_transitionOverlay,"overlayFadeOut");
			_gthis.renderCodeFile();
		},2000);
		haxe_Timer.delay(function() {
			HtmlUtils.removeClassFromElement(_gthis.m_transitionOverlay,"overlayFadeOut");
			_gthis.m_transitionOverlay.style.display = "none";
			_gthis.resumeCodeExecution();
		},4000);
	}
	,__class__: CodeDisplay
};
var EventManager = function() { };
EventManager.__name__ = true;
EventManager.addEvent = function(eventName) {
	var _this = EventManager.ms_eventMap;
	if(!(__map_reserved[eventName] != null ? _this.existsReserved(eventName) : _this.h.hasOwnProperty(eventName))) {
		var this1 = EventManager.ms_eventMap;
		var value = [];
		var _this1 = this1;
		if(__map_reserved[eventName] != null) {
			_this1.setReserved(eventName,value);
		} else {
			_this1.h[eventName] = value;
		}
	}
};
EventManager.subscribeToEvent = function(eventName,callback) {
	EventManager.addEvent(eventName);
	var _this = EventManager.ms_eventMap;
	(__map_reserved[eventName] != null ? _this.getReserved(eventName) : _this.h[eventName]).push(callback);
};
EventManager.triggerEvent = function(eventName) {
	var _this = EventManager.ms_eventMap;
	if(__map_reserved[eventName] != null ? _this.existsReserved(eventName) : _this.h.hasOwnProperty(eventName)) {
		var _g = 0;
		var _this1 = EventManager.ms_eventMap;
		var _g1 = __map_reserved[eventName] != null ? _this1.getReserved(eventName) : _this1.h[eventName];
		while(_g < _g1.length) {
			var subscriber = _g1[_g];
			++_g;
			subscriber();
		}
	}
};
var HtmlUtils = function() { };
HtmlUtils.__name__ = true;
HtmlUtils.getElementById = function(id) {
	return window.document.querySelector("#" + id);
};
HtmlUtils.addClassToElement = function(element,className) {
	element.className += " " + className;
};
HtmlUtils.removeClassFromElement = function(element,className) {
	element.className = StringTools.replace(element.className," " + className,"");
};
HtmlUtils.addClassToElementWithId = function(elementId,className) {
	var element = HtmlUtils.getElementById(elementId);
	element.className += " " + className;
};
HtmlUtils.removeClassFromElementWithId = function(elementId,className) {
	var element = HtmlUtils.getElementById(elementId);
	element.className = StringTools.replace(element.className," " + className,"");
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var document = window.document;
	document.addEventListener("DOMContentLoaded",function(event) {
		var codeDisplay = new CodeDisplay();
	});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var code_Code = function(identifier) {
	if(identifier == null) {
		identifier = "";
	}
	this.m_identifier = identifier;
};
code_Code.__name__ = true;
code_Code.prototype = {
	execute: function() {
		HtmlUtils.addClassToElementWithId(this.m_identifier,"active");
		return code_ExecuteAction.Next;
	}
	,endExecute: function() {
		HtmlUtils.removeClassFromElementWithId(this.m_identifier,"active");
	}
	,reset: function() {
	}
	,__class__: code_Code
};
var code_Statement = function(id) {
	code_Code.call(this,id);
};
code_Statement.__name__ = true;
code_Statement.__super__ = code_Code;
code_Statement.prototype = $extend(code_Code.prototype,{
	execute: function() {
		return code_Code.prototype.execute.call(this);
	}
	,getHtml: function() {
		return null;
	}
	,__class__: code_Statement
});
var code_AssignmentStatement = function(lhs,rhs,id,declaration) {
	if(declaration == null) {
		declaration = true;
	}
	this.m_rhs = rhs;
	this.m_lhs = lhs;
	this.m_declaration = declaration;
	code_Statement.call(this,id);
};
code_AssignmentStatement.__name__ = true;
code_AssignmentStatement.__super__ = code_Statement;
code_AssignmentStatement.prototype = $extend(code_Statement.prototype,{
	execute: function() {
		code_Statement.prototype.execute.call(this);
		var rhsAction = this.m_rhs.execute();
		if(rhsAction != code_ExecuteAction.Skip) {
			return rhsAction;
		}
		return code_ExecuteAction.Next;
	}
	,getHtml: function() {
		var doc = window.document;
		var div = doc.createElement("div");
		div.className = "assignmentStatement";
		if(this.m_declaration) {
			var varKeyword = new code_Keyword("var");
			div.appendChild(varKeyword.getHtml());
			div.innerHTML += " ";
		}
		div.appendChild(this.m_lhs.getHtml());
		div.innerHTML += " = ";
		div.id = this.m_identifier;
		div.appendChild(this.m_rhs.getHtml());
		div.innerHTML += ";";
		return div;
	}
	,reset: function() {
		this.m_rhs.reset();
	}
	,__class__: code_AssignmentStatement
});
var code_ExecuteAction = { __ename__ : true, __constructs__ : ["Next","Skip","EnterBlock","ExitBlock","Pause","FastEnterBlock"] };
code_ExecuteAction.Next = ["Next",0];
code_ExecuteAction.Next.toString = $estr;
code_ExecuteAction.Next.__enum__ = code_ExecuteAction;
code_ExecuteAction.Skip = ["Skip",1];
code_ExecuteAction.Skip.toString = $estr;
code_ExecuteAction.Skip.__enum__ = code_ExecuteAction;
code_ExecuteAction.EnterBlock = ["EnterBlock",2];
code_ExecuteAction.EnterBlock.toString = $estr;
code_ExecuteAction.EnterBlock.__enum__ = code_ExecuteAction;
code_ExecuteAction.ExitBlock = ["ExitBlock",3];
code_ExecuteAction.ExitBlock.toString = $estr;
code_ExecuteAction.ExitBlock.__enum__ = code_ExecuteAction;
code_ExecuteAction.Pause = ["Pause",4];
code_ExecuteAction.Pause.toString = $estr;
code_ExecuteAction.Pause.__enum__ = code_ExecuteAction;
code_ExecuteAction.FastEnterBlock = ["FastEnterBlock",5];
code_ExecuteAction.FastEnterBlock.toString = $estr;
code_ExecuteAction.FastEnterBlock.__enum__ = code_ExecuteAction;
var code_CodeBlock = function(code1,id) {
	this.m_containedCode = code1;
	this.reset();
	code_Statement.call(this,id);
};
code_CodeBlock.__name__ = true;
code_CodeBlock.__super__ = code_Statement;
code_CodeBlock.prototype = $extend(code_Statement.prototype,{
	execute: function() {
		if(this.m_currExecCode == this.m_containedCode.length) {
			this.m_containedCode[this.m_currExecCode - 1].endExecute();
			return code_ExecuteAction.ExitBlock;
		}
		if(this.m_currExecCode == -1) {
			code_Statement.prototype.execute.call(this);
			this.m_currExecCode = 0;
			return code_ExecuteAction.EnterBlock;
		} else if(this.m_currExecCode == 0) {
			this.endExecute();
		} else if(this.m_currExecCode > 0) {
			this.m_containedCode[this.m_currExecCode - 1].endExecute();
		}
		var action = this.m_containedCode[this.m_currExecCode].execute();
		if(action == code_ExecuteAction.EnterBlock) {
			this.m_nestedScopeCount++;
			action = code_ExecuteAction.Next;
		} else if(action == code_ExecuteAction.ExitBlock) {
			this.m_nestedScopeCount--;
			action = code_ExecuteAction.Skip;
		} else if(action == code_ExecuteAction.FastEnterBlock) {
			this.m_nestedScopeCount++;
			action = code_ExecuteAction.Skip;
		}
		if(this.m_nestedScopeCount == 0) {
			this.m_currExecCode++;
		}
		return action;
	}
	,reset: function() {
		this.m_nestedScopeCount = 0;
		this.m_currExecCode = -1;
	}
	,getHtml: function() {
		var doc = window.document;
		var div = doc.createElement("div");
		div.className = "block";
		div.id = this.m_identifier;
		div.innerHTML = "{";
		var _g = 0;
		var _g1 = this.m_containedCode;
		while(_g < _g1.length) {
			var code1 = _g1[_g];
			++_g;
			div.appendChild(code1.getHtml());
		}
		div.innerHTML += "}";
		return div;
	}
	,__class__: code_CodeBlock
});
var code_Expression = function(id) {
	if(id == null) {
		id = "";
	}
	code_Code.call(this,id);
};
code_Expression.__name__ = true;
code_Expression.__super__ = code_Code;
code_Expression.prototype = $extend(code_Code.prototype,{
	execute: function() {
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		return null;
	}
	,__class__: code_Expression
});
var code_CodeValue = function(value,isVariable,id) {
	if(id == null) {
		id = "";
	}
	if(isVariable == null) {
		isVariable = false;
	}
	this.m_value = value;
	this.m_isVariable = isVariable;
	code_Expression.call(this,id);
};
code_CodeValue.__name__ = true;
code_CodeValue.__super__ = code_Expression;
code_CodeValue.prototype = $extend(code_Expression.prototype,{
	execute: function() {
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		var span = doc.createElement("span");
		span.innerHTML += this.m_value;
		if(this.m_isVariable) {
			span.className = "variableName";
		} else {
			span.className = "rawValue";
		}
		return span;
	}
	,__class__: code_CodeValue
});
var code_Comment = function(text,multiLine,id) {
	if(id == null) {
		id = "";
	}
	if(multiLine == null) {
		multiLine = false;
	}
	this.m_text = text;
	this.m_multiLine = multiLine;
	code_Statement.call(this,id);
};
code_Comment.__name__ = true;
code_Comment.__super__ = code_Statement;
code_Comment.prototype = $extend(code_Statement.prototype,{
	execute: function() {
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		var div = doc.createElement("div");
		div.className = "comment";
		div.id = this.m_identifier;
		if(this.m_multiLine) {
			div.innerHTML = "/*<br>";
			var lines = this.m_text.split("\n");
			var _g = 0;
			while(_g < lines.length) {
				var line = lines[_g];
				++_g;
				div.innerHTML += " * " + line + "<br>";
			}
			div.innerHTML += " *<br> */";
		} else {
			div.innerHTML = "// " + this.m_text;
		}
		return div;
	}
	,__class__: code_Comment
});
var code_ComparisonOperator = { __ename__ : true, __constructs__ : ["Equals","GreaterThan","LessThan","GreaterThanOrEqual","LessThanOrEqual"] };
code_ComparisonOperator.Equals = ["Equals",0];
code_ComparisonOperator.Equals.toString = $estr;
code_ComparisonOperator.Equals.__enum__ = code_ComparisonOperator;
code_ComparisonOperator.GreaterThan = ["GreaterThan",1];
code_ComparisonOperator.GreaterThan.toString = $estr;
code_ComparisonOperator.GreaterThan.__enum__ = code_ComparisonOperator;
code_ComparisonOperator.LessThan = ["LessThan",2];
code_ComparisonOperator.LessThan.toString = $estr;
code_ComparisonOperator.LessThan.__enum__ = code_ComparisonOperator;
code_ComparisonOperator.GreaterThanOrEqual = ["GreaterThanOrEqual",3];
code_ComparisonOperator.GreaterThanOrEqual.toString = $estr;
code_ComparisonOperator.GreaterThanOrEqual.__enum__ = code_ComparisonOperator;
code_ComparisonOperator.LessThanOrEqual = ["LessThanOrEqual",4];
code_ComparisonOperator.LessThanOrEqual.toString = $estr;
code_ComparisonOperator.LessThanOrEqual.__enum__ = code_ComparisonOperator;
var code_ComparisonExpression = function(rhs,lhs,operator) {
	this.m_rhs = rhs;
	this.m_lhs = lhs;
	this.m_operator = operator;
	code_Expression.call(this);
};
code_ComparisonExpression.__name__ = true;
code_ComparisonExpression.__super__ = code_Expression;
code_ComparisonExpression.prototype = $extend(code_Expression.prototype,{
	execute: function() {
		return code_ExecuteAction.Next;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		var span = doc.createElement("span");
		span.appendChild(this.m_rhs.getHtml());
		span.innerHTML += " " + this.getOperatorString() + " ";
		span.appendChild(this.m_lhs.getHtml());
		return span;
	}
	,getOperatorString: function() {
		var _g = this.m_operator;
		switch(_g[1]) {
		case 0:
			return "==";
		case 1:
			return ">";
		case 2:
			return "<";
		case 3:
			return ">=";
		case 4:
			return "<=";
		}
	}
	,__class__: code_ComparisonExpression
});
var code_ConditionalType = { __ename__ : true, __constructs__ : ["If","While","ElseIf","Else"] };
code_ConditionalType.If = ["If",0];
code_ConditionalType.If.toString = $estr;
code_ConditionalType.If.__enum__ = code_ConditionalType;
code_ConditionalType.While = ["While",1];
code_ConditionalType.While.toString = $estr;
code_ConditionalType.While.__enum__ = code_ConditionalType;
code_ConditionalType.ElseIf = ["ElseIf",2];
code_ConditionalType.ElseIf.toString = $estr;
code_ConditionalType.ElseIf.__enum__ = code_ConditionalType;
code_ConditionalType.Else = ["Else",3];
code_ConditionalType.Else.toString = $estr;
code_ConditionalType.Else.__enum__ = code_ConditionalType;
var code_ConditionalBlock = function(type,expression,code1,id) {
	this.m_type = type;
	this.m_expression = expression;
	if(this.m_type == code_ConditionalType.Else) {
		this.setCondiditionCheckCallback(function() {
			return true;
		});
	}
	code_CodeBlock.call(this,code1,id);
};
code_ConditionalBlock.__name__ = true;
code_ConditionalBlock.__super__ = code_CodeBlock;
code_ConditionalBlock.prototype = $extend(code_CodeBlock.prototype,{
	execute: function() {
		var _gthis = this;
		var action = code_CodeBlock.prototype.execute.call(this);
		if(action == code_ExecuteAction.EnterBlock) {
			if(this.m_conditionCheck != null && this.m_conditionCheck()) {
				haxe_Timer.delay(function() {
					HtmlUtils.addClassToElementWithId(_gthis.m_identifier,"conditionTrue");
				},400);
				return code_ExecuteAction.EnterBlock;
			} else {
				haxe_Timer.delay(function() {
					HtmlUtils.addClassToElementWithId(_gthis.m_identifier,"conditionFalse");
				},500);
				return code_ExecuteAction.Next;
			}
		} else if(action == code_ExecuteAction.ExitBlock) {
			if(this.m_type == code_ConditionalType.While) {
				this.reset();
				var _g = 0;
				var _g1 = this.m_containedCode;
				while(_g < _g1.length) {
					var code1 = _g1[_g];
					++_g;
					code1.reset();
				}
				return code_ExecuteAction.Skip;
			} else {
				return action;
			}
		} else {
			return action;
		}
	}
	,endExecute: function() {
		HtmlUtils.removeClassFromElementWithId(this.m_identifier,"conditionTrue");
		HtmlUtils.removeClassFromElementWithId(this.m_identifier,"conditionFalse");
		code_CodeBlock.prototype.endExecute.call(this);
	}
	,getHtml: function() {
		var doc = window.document;
		var keyword = new code_Keyword(this.getTypeString(),false);
		var lineSpan = doc.createElement("span");
		lineSpan.appendChild(keyword.getHtml());
		if(this.m_type != code_ConditionalType.Else) {
			lineSpan.innerHTML += "(";
			lineSpan.appendChild(this.m_expression.getHtml());
			lineSpan.innerHTML += ")";
		}
		lineSpan.innerHTML += "<br>";
		var div = code_CodeBlock.prototype.getHtml.call(this);
		div.insertBefore(lineSpan,div.firstChild);
		return div;
	}
	,setCondiditionCheckCallback: function(callback) {
		this.m_conditionCheck = callback;
	}
	,getTypeString: function() {
		var _g = this.m_type;
		switch(_g[1]) {
		case 0:
			return "if";
		case 1:
			return "while";
		case 2:
			return "else if";
		case 3:
			return "else";
		}
	}
	,__class__: code_ConditionalBlock
});
var code_FunctionBlock = function(functionName,code1) {
	this.m_function = new code_FunctionCallExpression(functionName);
	code_CodeBlock.call(this,code1,functionName + "Function");
};
code_FunctionBlock.__name__ = true;
code_FunctionBlock.__super__ = code_CodeBlock;
code_FunctionBlock.prototype = $extend(code_CodeBlock.prototype,{
	execute: function() {
		return code_CodeBlock.prototype.execute.call(this);
	}
	,getHtml: function() {
		var doc = window.document;
		var div = code_CodeBlock.prototype.getHtml.call(this);
		var funcKeyword = new code_Keyword("function");
		var span = doc.createElement("span");
		span.appendChild(funcKeyword.getHtml());
		span.innerHTML += " ";
		span.appendChild(this.m_function.getHtml());
		span.innerHTML += "<br>";
		div.insertBefore(span,div.firstChild);
		return div;
	}
	,__class__: code_FunctionBlock
});
var code_FunctionCallExpression = function(funcName,parameters) {
	this.m_functionName = funcName;
	this.m_parameters = parameters;
	code_Expression.call(this,funcName + "Call");
};
code_FunctionCallExpression.__name__ = true;
code_FunctionCallExpression.__super__ = code_Expression;
code_FunctionCallExpression.prototype = $extend(code_Expression.prototype,{
	execute: function() {
		if(this.m_executeCallback != null) {
			this.m_executeCallback();
		}
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		var nameSpan = doc.createElement("span");
		nameSpan.innerHTML = this.m_functionName;
		nameSpan.className = "functionName";
		var lineSpan = doc.createElement("span");
		lineSpan.appendChild(nameSpan);
		lineSpan.innerHTML += "(";
		if(this.m_parameters != null) {
			var _g1 = 0;
			var _g = this.m_parameters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i > 0) {
					lineSpan.innerHTML += ", ";
				}
				lineSpan.appendChild(this.m_parameters[i].getHtml());
			}
		}
		lineSpan.innerHTML += ")";
		return lineSpan;
	}
	,setExecuteCallback: function(callback) {
		this.m_executeCallback = callback;
	}
	,__class__: code_FunctionCallExpression
});
var code_FunctionCallStatement = function(funcName,parameters) {
	this.m_funcCall = new code_FunctionCallExpression(funcName,parameters);
	code_Statement.call(this,funcName + "CallStatment");
};
code_FunctionCallStatement.__name__ = true;
code_FunctionCallStatement.__super__ = code_Statement;
code_FunctionCallStatement.prototype = $extend(code_Statement.prototype,{
	execute: function() {
		var _gthis = this;
		code_Statement.prototype.execute.call(this);
		haxe_Timer.delay(function() {
			HtmlUtils.addClassToElementWithId(_gthis.m_identifier,"funcInvoke");
			_gthis.m_funcCall.execute();
		},500);
		return code_ExecuteAction.Pause;
	}
	,endExecute: function() {
		code_Statement.prototype.endExecute.call(this);
		HtmlUtils.removeClassFromElementWithId(this.m_identifier,"funcInvoke");
	}
	,getHtml: function() {
		var doc = window.document;
		var lineSpan = this.m_funcCall.getHtml();
		lineSpan.innerHTML += ";";
		var div = doc.createElement("div");
		div.appendChild(lineSpan);
		div.id = this.m_identifier;
		return div;
	}
	,setExecuteCallback: function(callback) {
		this.m_funcCall.setExecuteCallback(callback);
	}
	,__class__: code_FunctionCallStatement
});
var code_IfElseBlock = function(ifExpression,ifCode,ifCallback,elseCode,id) {
	this.m_ifBlock = new code_ConditionalBlock(code_ConditionalType.If,ifExpression,ifCode,id + "If");
	this.m_ifBlock.setCondiditionCheckCallback(ifCallback);
	var contents = [this.m_ifBlock];
	if(elseCode != null) {
		this.m_elseBlock = new code_ConditionalBlock(code_ConditionalType.Else,null,elseCode,id + "Else");
		contents.push(this.m_elseBlock);
	}
	code_CodeBlock.call(this,contents,id);
};
code_IfElseBlock.__name__ = true;
code_IfElseBlock.__super__ = code_CodeBlock;
code_IfElseBlock.prototype = $extend(code_CodeBlock.prototype,{
	execute: function() {
		if(this.m_currExecCode == -1) {
			this.m_currExecCode = 0;
			return code_ExecuteAction.FastEnterBlock;
		} else {
			return code_CodeBlock.prototype.execute.call(this);
		}
	}
	,getHtml: function() {
		var doc = window.document;
		var span = doc.createElement("span");
		span.id = this.m_identifier;
		span.className = "ifElBlock";
		var _g = 0;
		var _g1 = this.m_containedCode;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			span.appendChild(block.getHtml());
		}
		return span;
	}
	,__class__: code_IfElseBlock
});
var code_InteractiveCodeValue = function(id,options) {
	if(options == null) {
		options = ["true","false"];
	}
	this.m_options = options;
	code_CodeValue.call(this,options[0],false,id);
};
code_InteractiveCodeValue.__name__ = true;
code_InteractiveCodeValue.__super__ = code_CodeValue;
code_InteractiveCodeValue.prototype = $extend(code_CodeValue.prototype,{
	execute: function() {
		var _gthis = this;
		var selector = js_Boot.__cast(HtmlUtils.getElementById(this.m_identifier) , HTMLSelectElement);
		HtmlUtils.addClassToElement(selector,"interactPrompt");
		selector.disabled = false;
		selector.onchange = function(event) {
			if(_gthis.m_assignmentCallback != null) {
				_gthis.m_assignmentCallback(event.target.value);
			}
			selector.disabled = true;
			HtmlUtils.removeClassFromElement(selector,"interactPrompt");
			EventManager.triggerEvent("Unpause");
		};
		return code_ExecuteAction.Pause;
	}
	,getHtml: function() {
		var doc = window.document;
		var selector = doc.createElement("select");
		selector.disabled = true;
		var defOption = doc.createElement("option");
		defOption.defaultSelected = true;
		defOption.disabled = true;
		defOption.innerHTML = "[ SELECT ]";
		var optGroup = doc.createElement("optgroup");
		optGroup.appendChild(defOption);
		var _g1 = 0;
		var _g = this.m_options.length;
		while(_g1 < _g) {
			var i = _g1++;
			var option = doc.createElement("option");
			option.innerHTML = this.m_options[i];
			optGroup.appendChild(option);
		}
		selector.add(optGroup);
		selector.id = this.m_identifier;
		return selector;
	}
	,reset: function() {
		var selector = js_Boot.__cast(HtmlUtils.getElementById(this.m_identifier) , HTMLSelectElement);
		var options = selector.querySelectorAll("option");
		var _g1 = 0;
		var _g = options.length;
		while(_g1 < _g) {
			var i = _g1++;
			var option = js_Boot.__cast(options[i] , HTMLOptionElement);
			option.selected = option.defaultSelected;
		}
	}
	,setAssignmentCallback: function(callback) {
		this.m_assignmentCallback = callback;
	}
	,__class__: code_InteractiveCodeValue
});
var code_Keyword = function(keyword,isTypeName) {
	if(isTypeName == null) {
		isTypeName = true;
	}
	this.m_word = keyword;
	this.m_isTypeName = isTypeName;
	code_Expression.call(this);
};
code_Keyword.__name__ = true;
code_Keyword.__super__ = code_Expression;
code_Keyword.prototype = $extend(code_Expression.prototype,{
	execute: function() {
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		var span = doc.createElement("span");
		span.innerHTML = this.m_word;
		if(this.m_isTypeName) {
			span.className = "typeName";
		} else {
			span.className = "keyword";
		}
		return span;
	}
	,__class__: code_Keyword
});
var code_LineBreak = function() {
	code_Statement.call(this);
};
code_LineBreak.__name__ = true;
code_LineBreak.__super__ = code_Statement;
code_LineBreak.prototype = $extend(code_Statement.prototype,{
	execute: function() {
		return code_ExecuteAction.Skip;
	}
	,endExecute: function() {
	}
	,getHtml: function() {
		var doc = window.document;
		return doc.createElement("br");
	}
	,__class__: code_LineBreak
});
var codefiles_CodeFile = function() { };
codefiles_CodeFile.__name__ = true;
codefiles_CodeFile.queueNextFile = function(file) {
	codefiles_CodeFile.queuedFile = file;
	EventManager.triggerEvent("PushFile");
};
codefiles_CodeFile.prototype = {
	getHtml: function() {
		return this.m_codeBlock.getHtml();
	}
	,execute: function() {
		var action = this.m_codeBlock.execute();
		if(action == code_ExecuteAction.Skip) {
			this.execute();
		} else if(action != code_ExecuteAction.Pause) {
			haxe_Timer.delay($bind(this,this.execute),1000);
		}
	}
	,__class__: codefiles_CodeFile
};
var codefiles_Confirm = function(funcBlockName,varName,confirmFuncName,nextFileType,commentText) {
	var codeBlockContents = [];
	var lineBreak = new code_LineBreak();
	if(commentText != null) {
		var comment = new code_Comment(commentText,true);
		codeBlockContents.push(comment);
		codeBlockContents.push(lineBreak);
	}
	var func = new code_FunctionCallStatement(confirmFuncName);
	func.setExecuteCallback(function() {
		codefiles_CodeFile.queueNextFile(Type.createInstance(nextFileType,[]));
	});
	var expression = new code_CodeValue(varName,true);
	var ifConditional = new code_ConditionalBlock(code_ConditionalType.If,expression,[func],funcBlockName + "If");
	ifConditional.setCondiditionCheckCallback($bind(this,this.testVar));
	var interactCodeVal = new code_InteractiveCodeValue(varName + "Selector");
	interactCodeVal.setAssignmentCallback($bind(this,this.setVarValue));
	var ready = new code_AssignmentStatement(new code_CodeValue(varName,true),interactCodeVal,funcBlockName + "Set");
	var whileContents = [ready,lineBreak,ifConditional];
	var whileLoop = new code_ConditionalBlock(code_ConditionalType.While,new code_CodeValue("true"),whileContents,funcBlockName + "While");
	whileLoop.setCondiditionCheckCallback(function() {
		return true;
	});
	codeBlockContents.push(whileLoop);
	this.m_codeBlock = new code_FunctionBlock(funcBlockName,codeBlockContents);
};
codefiles_Confirm.__name__ = true;
codefiles_Confirm.__super__ = codefiles_CodeFile;
codefiles_Confirm.prototype = $extend(codefiles_CodeFile.prototype,{
	setVarValue: function(valueStr) {
		this.m_varValue = valueStr == "true";
	}
	,testVar: function() {
		return this.m_varValue;
	}
	,__class__: codefiles_Confirm
});
var codefiles_Decision = function(funcName,mainCommentText,varName,wwydCommentText,ifBlocks,choiceOptions) {
	if(varName == null) {
		varName = "action";
	}
	if(wwydCommentText == null) {
		wwydCommentText = "What will you do?";
	}
	var comment = new code_Comment(mainCommentText,true);
	var wwydComment = new code_Comment(wwydCommentText);
	var interactCodeVal = new code_InteractiveCodeValue("actionSelector",choiceOptions);
	interactCodeVal.setAssignmentCallback($bind(this,this.setDecisionVarValue));
	var action = new code_AssignmentStatement(new code_CodeValue(varName,true),interactCodeVal,funcName + "Set");
	var lineBreak = new code_LineBreak();
	var codeBlockContents = [comment,lineBreak,wwydComment,action];
	var _g = 0;
	while(_g < ifBlocks.length) {
		var ifBlock = ifBlocks[_g];
		++_g;
		codeBlockContents.push(lineBreak);
		codeBlockContents.push(ifBlock);
	}
	this.m_codeBlock = new code_FunctionBlock(funcName,codeBlockContents);
};
codefiles_Decision.__name__ = true;
codefiles_Decision.__super__ = codefiles_CodeFile;
codefiles_Decision.prototype = $extend(codefiles_CodeFile.prototype,{
	setDecisionVarValue: function(valueStr) {
		this.m_decisionVarValue = valueStr;
	}
	,__class__: codefiles_Decision
});
var codefiles_MainMenu = function() {
	var choiceOptions = ["PLAY","OPTIONS"];
	var playFunc = new code_FunctionCallStatement("startGame");
	playFunc.setExecuteCallback(function() {
		codefiles_CodeFile.queueNextFile(Type.createInstance(codefiles_MainMenu,[]));
	});
	var optFunc = new code_FunctionCallStatement("options");
	optFunc.setExecuteCallback(function() {
		codefiles_CodeFile.queueNextFile(Type.createInstance(codefiles_MainMenu,[]));
	});
	var varName = "choice";
	var lhs = new code_CodeValue(varName,true);
	var playRhs = new code_CodeValue(choiceOptions[0]);
	var playExpression = new code_ComparisonExpression(lhs,playRhs,code_ComparisonOperator.Equals);
	var ifelBlock = new code_IfElseBlock(playExpression,[playFunc],$bind(this,this.testPlay),[optFunc],"playIfEl");
	codefiles_Decision.call(this,"mainMenu","Welcome to if(adventure)",varName,null,[ifelBlock],choiceOptions);
};
codefiles_MainMenu.__name__ = true;
codefiles_MainMenu.__super__ = codefiles_Decision;
codefiles_MainMenu.prototype = $extend(codefiles_Decision.prototype,{
	testPlay: function() {
		return this.m_decisionVarValue == "PLAY";
	}
	,__class__: codefiles_MainMenu
});
var codefiles_SplashScreen = function() {
	this.initComment();
	codefiles_Confirm.call(this,"splashScreen","adventure","mainMenu",codefiles_MainMenu);
};
codefiles_SplashScreen.__name__ = true;
codefiles_SplashScreen.__super__ = codefiles_Confirm;
codefiles_SplashScreen.prototype = $extend(codefiles_Confirm.prototype,{
	getHtml: function() {
		var doc = window.document;
		var span = doc.createElement("span");
		span.appendChild(this.m_comment.getHtml());
		span.appendChild(new code_LineBreak().getHtml());
		span.appendChild(codefiles_Confirm.prototype.getHtml.call(this));
		return span;
	}
	,initComment: function() {
		var text = " _  __  __         _                 _                __  \n(_)/ _|/ /        | |               | |               \\ \\ \n _| |_| | __ _  __| |_   _____ _ __ | |_ _   _ _ __ ___| |\n| |  _| |/ _` |/ _` \\ \\ / / _ \\ '_ \\| __| | | | '__/ _ \\ |\n| | | | | (_| | (_| |\\ V /  __/ | | | |_| |_| | | |  __/ |\n|_|_| | |\\__,_|\\__,_| \\_/ \\___|_| |_|\\__|\\__,_|_|  \\___| |\n       \\_\\                                            /_/ ";
		this.m_comment = new code_Comment(text,true,"splashComment");
	}
	,__class__: codefiles_SplashScreen
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
EventManager.ms_eventMap = new haxe_ds_StringMap();
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
